#postgres
spring.datasource.url=${URL_DATABASE:jdbc:postgresql://localhost:5433/propostas}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}

#hibernate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL95Dialect

# spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/propostas}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/propostas/protocol/openid-connect/certs}

#log
logging.level.org.springframework.security=DEBUG

#management
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.prometheus.enabled=true
management.endpoint.health.show-details=always

#schedule
periodicidade.associa-cartao=${PERIODICIDADE_ASSOCIA_CARTAO:10000}

# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${spring.application.name}

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

#desabilita a configuração de OpenTracing para JDBC
opentracing.spring.cloud.jdbc.enabled=false

cartoes.host=http://localhost:8888/api/cartoes/
solicitacao.host=http://localhost:9999/api/solicitacao/